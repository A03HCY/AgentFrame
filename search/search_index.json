{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agenticle","text":"<p>Agenticle is a lightweight, event-driven Python framework for building and orchestrating multi-agent systems. It provides simple yet powerful abstractions to create individual agents, equip them with tools, and make them collaborate in groups to solve complex tasks.</p>"},{"location":"#core-features","title":"Core Features","text":"<ul> <li>Modular Agents: Define autonomous agents with distinct roles, tools, and configurations.</li> <li>Simple Tool Integration: Easily wrap any Python function into a <code>Tool</code> that agents can use.</li> <li>External Tool Integration (MCP): Connect to external, language-agnostic tool servers via the Model Context Protocol.</li> <li>Collaborative Groups: Orchestrate multiple agents in a <code>Group</code>, enabling them to delegate tasks to each other.</li> <li>Flexible Communication Patterns: Control how agents interact within a group using modes like <code>broadcast</code>, <code>manager_delegation</code>, <code>round_robin</code>, or <code>voting</code>.</li> <li>Shared Workspace: Provide a sandboxed file system (<code>Workspace</code>) to a group, allowing agents to collaborate by reading and writing files.</li> <li>State Management: Save and load the state of an entire agent group, enabling long-running tasks to be paused and resumed.</li> <li>Event-Driven &amp; Streamable: The entire execution process is a stream of <code>Event</code> objects, providing full transparency and making it easy to build real-time UIs and logs.</li> <li>Parallel Tool Execution: Agents can execute multiple tools concurrently in a single step, significantly speeding up tasks that involve multiple I/O-bound operations (e.g., API calls, file I/O).</li> <li>Dynamic Prompt Templating: Customize agent behavior using Jinja2 templates for system prompts, with the ability to inject contextual information from the group.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install the package directly from PyPI:</p> <pre><code>pip install agenticle\n</code></pre> <p>Or, for development, clone the repository and install in editable mode:</p> <pre><code>git clone https://github.com/A03HCY/Agenticle.git\ncd Agenticle\npip install -e .\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#1-creating-a-single-agent","title":"1. Creating a Single Agent","text":"<p>You can easily create a standalone agent and equip it with tools.</p> <pre><code>from agenticle import Agent, Tool, Endpoint\n\n# Define a simple function to be used as a tool\ndef get_current_weather(location: str):\n    \"\"\"Gets the current weather for a specified location.\"\"\"\n    return f\"Weather in {location}: 15 degrees Celsius, sunny.\"\n\n# Create an endpoint configuration\nopenai_endpoint = Endpoint(\n    api_key='YOUR_API_KEY',\n    base_url='YOUR_API_BASE_URL'\n)\n\n# Create a tool from the function\nweather_tool = Tool(get_current_weather)\n\n# Create an agent\nweather_agent = Agent(\n    name=\"Weather_Specialist\",\n    description=\"Specializes in fetching weather information for a given city.\",\n    input_parameters=[{\"name\": \"city\"}],\n    tools=[weather_tool],\n    endpoint=openai_endpoint,\n    model_id='your-model-id',\n    target_lang='English' # Specify the output language\n)\n\n# Run the agent and stream events\nevent_stream = weather_agent.run(stream=True, city=\"Beijing\")\nfor event in event_stream:\n    print(event)\n</code></pre>"},{"location":"#2-building-a-multi-agent-team-group","title":"2. Building a Multi-Agent Team (Group)","text":"<p>The true power of Agenticle lies in making agents collaborate. Here's how to build a \"Travel Agency\" team where a manager delegates tasks to specialists.</p> <pre><code>from agenticle import Agent, Group, Tool, Endpoint\n\n# (Define get_current_weather, find_tourist_attractions, etc.)\n# (Create weather_agent, search_agent, etc.)\n\n# Create a manager agent that has no tools of its own\nplanner_agent = Agent(\n    name=\"Planner_Manager\",\n    description=\"A smart planner that breaks down complex travel requests and delegates tasks to the appropriate specialist.\",\n    input_parameters=[{\"name\": \"user_request\"}],\n    tools=[], # The manager delegates, it doesn't work\n    endpoint=openai_endpoint,\n    model_id='your-model-id'\n)\n\n# A shared tool available to all agents in the group\nshared_flight_tool = Tool(get_flight_info)\n\n# Assemble the team in \"manager_delegation\" mode\ntravel_agency = Group(\n    name=\"Travel_Agency\",\n    agents=[planner_agent, weather_agent, search_agent],\n    manager_agent_name=\"Planner_Manager\",\n    shared_tools=[shared_flight_tool],\n    mode='manager_delegation' # Only the manager can call other agents\n)\n\n# Run the entire group on a complex query\nuser_query = \"I want to travel to Beijing. How is the weather, what are the famous attractions, and can you check flight info?\"\nevent_stream = travel_agency.run(stream=True, user_request=user_query)\n\nfor event in event_stream:\n    print(event)\n</code></pre>"},{"location":"#integrating-with-external-tools-via-mcp","title":"Integrating with External Tools via MCP","text":"<p>Agenticle supports the Model Context Protocol (MCP), enabling agents to connect to and utilize tools from external, language-agnostic servers. This allows you to extend an agent's capabilities beyond simple Python functions, integrating with microservices, external APIs, or tools written in other languages.</p> <pre><code>from agenticle import MCP\n\n# Connect to an MCP server (can be a local script or a remote URL)\n# Example with a local Python script:\n# mcp_server_endpoint = \"python -m your_mcp_server_module\"\n# Example with a remote server:\n# mcp_server_endpoint = \"http://localhost:8000/mcp\"\n\nmcp_client = MCP(mcp_server_endpoint)\n\n# The MCP client automatically lists tools from the server\n# and converts them into Agenticle Tool objects.\nmcp_tools = mcp_client.list_tools()\n\n# Now, you can add these tools to any agent\nremote_tool_agent = Agent(\n    name=\"Remote_Tool_User\",\n    description=\"An agent that can use tools from an external server.\",\n    tools=mcp_tools,\n    # ... other agent config\n)\n\n# The agent can now call tools like 'get_database_records' or 'process_image'\n# as if they were local Python functions.\nremote_tool_agent.run(\"Fetch the last 5 user records from the database.\")\n</code></pre> <p>This powerful feature makes the Agenticle ecosystem highly extensible and interoperable.</p>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#agent","title":"Agent","text":"<p>The <code>Agent</code> is the fundamental actor in the system. It is initialized with: - <code>name</code>: A unique identifier. - <code>description</code>: High-level mission objective. - <code>input_parameters</code>: The schema for its main task input. - <code>tools</code>: A list of <code>Tool</code> objects it can use. - <code>endpoint</code> &amp; <code>model_id</code>: Configuration for the LLM it should use. - <code>optimize_tool_call</code>: An optional boolean that, when set to <code>True</code>, uses a custom XML-based prompt mechanism for tool calls. This can improve reliability for models that have weaker native tool-calling capabilities.</p> <p>An <code>Agent</code> can also execute multiple tools in parallel if the LLM decides it's logical to do so in a single step.</p>"},{"location":"#group","title":"Group","text":"<p>A <code>Group</code> coordinates a list of <code>Agent</code> instances. Key parameters: - <code>agents</code>: The list of agents in the group. - <code>manager_agent_name</code>: The name of the agent that acts as the entry point for tasks. - <code>shared_tools</code>: A list of <code>Tool</code> objects that all agents in the group can access, in addition to their own. - <code>mode</code>:     - <code>'broadcast'</code> (default): Every agent can call every other agent in the group.     - <code>'manager_delegation'</code>: Only the manager agent can call other agents. Specialist agents can only use their own tools and the shared tools.     - <code>'round_robin'</code>: Agents are executed sequentially in the order they are provided. The output of one agent becomes the input for the next, forming a processing pipeline.     - <code>'voting'</code>: All agents in the group receive the same input and run in parallel. They are expected to return a structured vote on a set of options, and the group determines the final result by tallying the votes. - <code>workspace</code>: An optional <code>Workspace</code> instance or a file path to create a shared directory for all agents in the group.</p>"},{"location":"#workspace-and-state-management","title":"Workspace and State Management","text":"<p>Agenticle provides powerful features for managing state and shared resources, which are crucial for complex, long-running tasks.</p>"},{"location":"#shared-workspace","title":"Shared Workspace","text":"<p>You can create a <code>Group</code> with a <code>Workspace</code>, which is a sandboxed directory where all agents in that group can read and write files. This enables collaboration through a shared file system.</p> <pre><code>from agenticle import Group, Workspace\n\n# Create a workspace in a specific directory, or leave empty for a temporary one\nmy_workspace = Workspace(path=\"./my_shared_work_dir\")\n\n# Provide the workspace to the group\nmy_group = Group(\n    name=\"File_Workers\",\n    agents=[reader_agent, writer_agent],\n    workspace=my_workspace\n)\n# Now, both reader_agent and writer_agent can use tools like\n# read_file('data.txt') and write_file('result.txt') within the workspace.\n</code></pre>"},{"location":"#saving-and-loading-state","title":"Saving and Loading State","text":"<p>For tasks that might be interrupted or need to be resumed later, you can save the entire state of a <code>Group</code> (including the conversation history of every agent) to a file and load it back later.</p> <pre><code># Assume 'travel_agency' is a running Group\n# ... some interactions happen ...\n\n# Save the current state\ntravel_agency.save_state(\"travel_agency_session.json\")\n\n# Later, you can restore the group to its previous state\n# First, create the group with the same configuration\nrestored_agency = Group(...) \n# Then, load the state\nrestored_agency.load_state(\"travel_agency_session.json\")\n\n# The group can now continue the task from where it left off.\n</code></pre>"},{"location":"#understanding-the-event-stream","title":"Understanding the Event Stream","text":"<p>When you run an agent or group with <code>stream=True</code>, the framework returns an iterator of <code>Event</code> objects. Each event provides a real-time glimpse into the agent's execution cycle. This is incredibly useful for building UIs, logging, or debugging.</p> <p>Each <code>Event</code> has a <code>source</code> (e.g., <code>Agent:Weather_Specialist</code>), a <code>type</code>, and a <code>payload</code>. Here are the key event types you will encounter:</p> <ul> <li><code>start</code>: Fired once when the agent's task begins.<ul> <li>Payload: The initial input parameters given to the agent.</li> </ul> </li> <li><code>resume</code>: Fired instead of <code>start</code> when a <code>Group</code> or <code>Agent</code> continues execution from a loaded state.<ul> <li>Payload: Contextual information about the resumption, like <code>history_length</code>.</li> </ul> </li> <li><code>step</code>: Marks the beginning of a new \"Think-Act\" cycle.<ul> <li>Payload: Contains the <code>current_step</code> number.</li> </ul> </li> <li><code>reasoning_stream</code>: A continuous stream of the agent's thought process as it decides what to do next.<ul> <li>Payload: A <code>content</code> chunk from the LLM's reasoning.</li> </ul> </li> <li><code>content_stream</code>: A stream of the final answer content, if the LLM decides to respond directly without calling a tool.<ul> <li>Payload: A <code>content</code> chunk of the final answer.</li> </ul> </li> <li><code>decision</code>: Fired when the agent has made a firm decision to call a tool or another agent.<ul> <li>Payload: Contains the <code>tool_name</code> and <code>tool_args</code> for the call.</li> </ul> </li> <li><code>tool_result</code>: Fired after a tool has been executed.<ul> <li>Payload: Contains the <code>tool_name</code> and the <code>output</code> returned by the tool.</li> </ul> </li> <li><code>tool_completed</code>: An internal event fired when a tool finishes execution in parallel mode. It is then processed to generate a <code>tool_result</code> event.<ul> <li>Payload: Contains <code>tool_call_id</code>, <code>tool_name</code>, and the final <code>output</code>.</li> </ul> </li> <li><code>end</code>: The final event, signaling that the task is complete.<ul> <li>Payload: Contains the <code>final_answer</code> or an <code>error</code> message if the task failed.</li> </ul> </li> <li><code>error</code>: Fired if a critical error occurs that terminates the process.<ul> <li>Payload: An error <code>message</code>.</li> </ul> </li> </ul>"},{"location":"#real-time-monitoring-dashboard","title":"Real-Time Monitoring Dashboard","text":"<p>Agenticle includes a built-in, real-time monitoring dashboard that visualizes the event stream from an <code>Agent</code> or <code>Group</code>. This is incredibly useful for debugging, observing agent behavior, and understanding the flow of a multi-agent collaboration.</p>"},{"location":"#how-to-use","title":"How to Use","text":"<ol> <li> <p>Install Dashboard Dependencies:     First, install the necessary dependencies for the dashboard:     <code>bash     pip install \"agenticle[dashboard]\"</code></p> </li> <li> <p>Wrap Your Agent/Group:     Import the <code>Dashboard</code> class and wrap your existing <code>Agent</code> or <code>Group</code> instance. Any arguments you want to pass to your agent's <code>.run()</code> method should be passed to the <code>Dashboard</code> constructor.</p> <p>```python from agenticle import Agent, Dashboard</p> </li> <li> <p>View in Browser:     Open your web browser and navigate to <code>http://127.0.0.1:8000</code>. You will see a live feed of the events as your agent or group executes the task.</p> </li> </ol> <p>A complete, runnable example can be found in <code>examples/dashboard/main.py</code>.</p>"},{"location":"#assume-my_agent-is-an-already-configured-agent-instance","title":"Assume 'my_agent' is an already configured Agent instance","text":""},{"location":"#arguments-for-the-agent-run-eg-querysome-task","title":"Arguments for the agent run, e.g., <code>query=\"some task\"</code>","text":"<p>agent_args = {\"query\": \"What is the weather in London?\"}</p>"},{"location":"#wrap-the-agent-with-the-dashboard","title":"Wrap the agent with the Dashboard","text":"<p>dashboard = Dashboard(my_agent, **agent_args)</p>"},{"location":"#run-the-dashboard-server","title":"Run the dashboard server","text":""},{"location":"#by-default-it-starts-at-http1270018000","title":"By default, it starts at http://127.0.0.1:8000","text":"<p>dashboard.run() ```</p>"},{"location":"#restful-api-server","title":"RESTful API Server","text":"<p>Agenticle includes a built-in FastAPI server that exposes a RESTful API for interacting with your agents and groups. This allows you to easily integrate Agenticle into larger applications, build custom user interfaces, or manage tasks programmatically.</p>"},{"location":"#api-features","title":"API Features","text":"<ul> <li>Asynchronous Task Execution: Start long-running agent tasks and poll for their status and results.</li> <li>Real-Time Event Streaming: Get a live feed of events from a running agent using Server-Sent Events (SSE).</li> <li>Dynamic Agent Registration: Register any number of pre-configured agents or groups to make them available through the API.</li> </ul>"},{"location":"#how-to-use_1","title":"How to Use","text":"<ol> <li> <p>Install API Dependencies:     <code>bash     pip install \"agenticle[api]\"</code></p> </li> <li> <p>Create a Server Script:     Create a Python script (e.g., <code>run_api.py</code>) to define, register, and run your agents.</p> <p>```python</p> </li> <li> <p>Run the Server:     <code>bash     python run_api.py</code></p> </li> <li> <p>Interact with the API:     You can now use any HTTP client to interact with the API.</p> <ul> <li>Stream a task:     <code>bash     curl -X POST http://127.0.0.1:8000/v1/tasks/stream -H \"Content-Type: application/json\" -d '{\"agent_or_group_name\": \"my_agent_api_name\", \"input_data\": {\"param\": \"value\"}}'</code></li> <li>Run a task asynchronously:     <code>bash     curl -X POST http://127.0.0.1:8000/v1/tasks -H \"Content-Type: application/json\" -d '{\"agent_or_group_name\": \"my_agent_api_name\", \"input_data\": {\"param\": \"value\"}}'</code></li> <li>Check task status:     <code>bash     curl http://127.0.0.1:8000/v1/tasks/{task_id}</code></li> </ul> </li> </ol> <p>A complete, runnable example can be found in <code>examples/api/main.py</code>.</p>"},{"location":"#in-run_apipy","title":"in run_api.py","text":"<p>from agenticle.agent import Agent import agenticle.server as server</p>"},{"location":"#1-define-your-agents-and-groups-as-usual","title":"1. Define your agents and groups as usual","text":"<p>my_agent = Agent(...)</p>"},{"location":"#2-register-them-with-the-server","title":"2. Register them with the server","text":"<p>server.register(\"my_agent_api_name\", my_agent)</p>"},{"location":"#3-start-the-server","title":"3. Start the server","text":"<p>if name == \"main\":     server.start_server() ```</p>"},{"location":"#advanced-customizing-agent-behavior-with-prompts","title":"Advanced: Customizing Agent Behavior with Prompts","text":"<p>Agenticle uses a powerful prompt templating system based on Jinja2 to define the core behavior and reasoning process of an agent. The default prompt is located at <code>agenticle/prompts/default_agent_prompt.md</code>, which instructs the agent to follow a <code>Think-Act</code> cycle.</p> <p>You can customize this behavior by creating your own prompt template and passing its file path to the <code>Agent</code> constructor.</p>"},{"location":"#default-prompt-default_agent_promptmd","title":"Default Prompt (<code>default_agent_prompt.md</code>)","text":"<p>The default template establishes a \"Cognitive Framework\" for the agent, guiding it to: 1.  OBSERVE: Review the objective and current state. 2.  THINK: Assess information, plan the next step, and select a tool or expert agent. 3.  ACT: Externalize its thought process and execute the chosen action.</p> <p>This structured approach ensures transparent and logical decision-making.</p>"},{"location":"#using-a-custom-prompt-template","title":"Using a Custom Prompt Template","text":"<p>To override the default behavior, simply provide the path to your custom <code>.md</code> template file when creating an agent:</p> <pre><code>my_custom_prompt_path = \"path/to/your/custom_prompt.md\"\n\ncustom_agent = Agent(\n    name=\"Custom_Agent\",\n    # ... other parameters\n    prompt_template_path=my_custom_prompt_path\n)\n</code></pre> <p>This allows you to completely redefine the agent's operational guidelines, personality, or even its reasoning structure.</p>"},{"location":"#template-variables","title":"Template Variables","text":"<p>When creating a custom prompt, you can use the following Jinja2 variables, which are passed to the template automatically:</p> <ul> <li><code>{{ agent_name }}</code>: The name of the agent.</li> <li><code>{{ agent_description }}</code>: The high-level mission description for the agent.</li> <li><code>{{ target_language }}</code>: The desired output language for the agent's responses (e.g., 'English', 'Simplified Chinese').</li> <li><code>{{ plain_tools }}</code>: A list of standard <code>Tool</code> objects available to the agent. These are regular Python functions.</li> <li><code>{{ agent_tools }}</code>: A list of tools that are actually other agents. This allows you to show them differently in the prompt, for instance, as \"Expert Agents\".</li> <li><code>{{ tools }}</code>: The complete list of all tools (both <code>plain_tools</code> and <code>agent_tools</code>).</li> <li>Custom Context Variables: Any extra context passed from a <code>Group</code> (e.g., <code>collaboration_mode</code>, <code>mode_description</code>) can be accessed in the template. This allows for highly adaptive agent behavior based on the collaboration strategy.</li> </ul> <p>You can iterate over these tool lists in your template to dynamically display the agent's capabilities, like this:</p> <p>```jinja --- FOUNDATIONAL TOOLS --- {% for tool in plain_tools %} - {{ tool.name }}({% for p in tool.parameters %}{{ p.name }}: {{ p.get('annotation', 'any')}}{% if not loop.last %}, {% endif %}{% endfor %}) Function: {{ tool.description | indent(4) }} {% endfor %}</p>"},{"location":"zh/","title":"Agenticle","text":"<p>Agenticle \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u3001\u4e8b\u4ef6\u9a71\u52a8\u7684 Python \u6846\u67b6\uff0c\u7528\u4e8e\u6784\u5efa\u548c\u7f16\u6392\u591a\u667a\u80fd\u4f53\u7cfb\u7edf\u3002\u5b83\u63d0\u4f9b\u4e86\u7b80\u5355\u800c\u5f3a\u5927\u7684\u62bd\u8c61\uff0c\u7528\u4e8e\u521b\u5efa\u72ec\u7acb\u7684\u667a\u80fd\u4f53\uff0c\u4e3a\u5b83\u4eec\u914d\u5907\u5de5\u5177\uff0c\u5e76\u8ba9\u5b83\u4eec\u5728\u7fa4\u7ec4\u4e2d\u534f\u4f5c\u4ee5\u89e3\u51b3\u590d\u6742\u4efb\u52a1\u3002</p>"},{"location":"zh/#_1","title":"\u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u6a21\u5757\u5316\u667a\u80fd\u4f53: \u5b9a\u4e49\u5177\u6709\u4e0d\u540c\u89d2\u8272\u3001\u5de5\u5177\u548c\u914d\u7f6e\u7684\u81ea\u4e3b\u667a\u80fd\u4f53\u3002</li> <li>\u7b80\u5355\u7684\u5de5\u5177\u96c6\u6210: \u8f7b\u677e\u5c06\u4efb\u4f55 Python \u51fd\u6570\u5305\u88c5\u6210\u4e00\u4e2a\u667a\u80fd\u4f53\u53ef\u4ee5\u4f7f\u7528\u7684 <code>Tool</code>\u3002</li> <li>\u5916\u90e8\u5de5\u5177\u96c6\u6210 (MCP): \u901a\u8fc7\u6a21\u578b\u4e0a\u4e0b\u6587\u534f\u8bae (Model Context Protocol) \u8fde\u63a5\u5230\u5916\u90e8\u7684\u3001\u8bed\u8a00\u65e0\u5173\u7684\u5de5\u5177\u670d\u52a1\u5668\u3002</li> <li>\u534f\u4f5c\u7fa4\u7ec4: \u5728\u4e00\u4e2a <code>Group</code> \u4e2d\u7f16\u6392\u591a\u4e2a\u667a\u80fd\u4f53\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u76f8\u4e92\u59d4\u6d3e\u4efb\u52a1\u3002</li> <li>\u7075\u6d3b\u7684\u901a\u4fe1\u6a21\u5f0f: \u4f7f\u7528 <code>broadcast</code>\u3001<code>manager_delegation</code>\u3001<code>round_robin</code> \u6216 <code>voting</code> \u7b49\u6a21\u5f0f\u63a7\u5236\u667a\u80fd\u4f53\u5728\u7fa4\u7ec4\u5185\u7684\u4ea4\u4e92\u65b9\u5f0f\u3002</li> <li>\u5171\u4eab\u5de5\u4f5c\u7a7a\u95f4: \u4e3a\u7fa4\u7ec4\u63d0\u4f9b\u4e00\u4e2a\u6c99\u76d2\u5316\u7684\u6587\u4ef6\u7cfb\u7edf (<code>Workspace</code>)\uff0c\u5141\u8bb8\u667a\u80fd\u4f53\u901a\u8fc7\u8bfb\u5199\u6587\u4ef6\u8fdb\u884c\u534f\u4f5c\u3002</li> <li>\u72b6\u6001\u7ba1\u7406: \u4fdd\u5b58\u548c\u52a0\u8f7d\u6574\u4e2a\u667a\u80fd\u4f53\u7fa4\u7ec4\u7684\u72b6\u6001\uff0c\u4f7f\u5f97\u957f\u65f6\u4efb\u52a1\u53ef\u4ee5\u88ab\u6682\u505c\u548c\u6062\u590d\u3002</li> <li>\u4e8b\u4ef6\u9a71\u52a8\u4e0e\u53ef\u6d41\u5f0f\u5904\u7406: \u6574\u4e2a\u6267\u884c\u8fc7\u7a0b\u662f\u4e00\u4e2a <code>Event</code> \u5bf9\u8c61\u6d41\uff0c\u63d0\u4f9b\u4e86\u5b8c\u5168\u7684\u900f\u660e\u5ea6\uff0c\u5e76\u4f7f\u5f97\u6784\u5efa\u5b9e\u65f6\u7528\u6237\u754c\u9762\u548c\u65e5\u5fd7\u53d8\u5f97\u5bb9\u6613\u3002</li> <li>\u5e76\u884c\u5de5\u5177\u6267\u884c: \u667a\u80fd\u4f53\u53ef\u4ee5\u5728\u5355\u6b65\u4e2d\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u5de5\u5177\uff0c\u663e\u8457\u52a0\u5feb\u6d89\u53ca\u591a\u4e2aI/O\u5bc6\u96c6\u578b\u64cd\u4f5c\uff08\u5982API\u8c03\u7528\u3001\u6587\u4ef6\u8bfb\u5199\uff09\u7684\u4efb\u52a1\u901f\u5ea6\u3002</li> <li>\u52a8\u6001\u63d0\u793a\u8bcd\u6a21\u677f: \u4f7f\u7528 Jinja2 \u6a21\u677f\u4e3a\u7cfb\u7edf\u63d0\u793a\u8bcd\u5b9a\u5236\u667a\u80fd\u4f53\u884c\u4e3a\uff0c\u5e76\u80fd\u591f\u4ece\u7fa4\u7ec4\u6ce8\u5165\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002</li> </ul>"},{"location":"zh/#_2","title":"\u5b89\u88c5","text":"<p>\u76f4\u63a5\u4ece PyPI \u5b89\u88c5\u5305\uff1a</p> <pre><code>pip install agenticle\n</code></pre> <p>\u6216\u8005\uff0c\u5bf9\u4e8e\u5f00\u53d1\uff0c\u514b\u9686\u4ed3\u5e93\u5e76\u4ee5\u53ef\u7f16\u8f91\u6a21\u5f0f\u5b89\u88c5\uff1a</p> <pre><code>git clone https://github.com/A03HCY/Agenticle.git\ncd Agenticle\npip install -e .\n</code></pre>"},{"location":"zh/#_3","title":"\u5feb\u901f\u5165\u95e8","text":""},{"location":"zh/#1","title":"1. \u521b\u5efa\u5355\u4e2a\u667a\u80fd\u4f53","text":"<p>\u60a8\u53ef\u4ee5\u8f7b\u677e\u521b\u5efa\u4e00\u4e2a\u72ec\u7acb\u7684\u667a\u80fd\u4f53\u5e76\u4e3a\u5176\u914d\u5907\u5de5\u5177\u3002</p> <pre><code>from agenticle import Agent, Tool, Endpoint\n\n# \u5b9a\u4e49\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u4f5c\u4e3a\u5de5\u5177\u4f7f\u7528\ndef get_current_weather(location: str):\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u5730\u70b9\u7684\u5f53\u524d\u5929\u6c14\u3002\"\"\"\n    return f\"{location}\u7684\u5929\u6c14\uff1a15\u6444\u6c0f\u5ea6\uff0c\u6674\u6717\u3002\"\n\n# \u521b\u5efa\u4e00\u4e2a\u7aef\u70b9\u914d\u7f6e\nopenai_endpoint = Endpoint(\n    api_key='\u4f60\u7684API\u5bc6\u94a5',\n    base_url='\u4f60\u7684API\u57fa\u7840URL'\n)\n\n# \u4ece\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u5de5\u5177\nweather_tool = Tool(get_current_weather)\n\n# \u521b\u5efa\u4e00\u4e2a\u667a\u80fd\u4f53\nweather_agent = Agent(\n    name=\"\u5929\u6c14\u4e13\u5458\",\n    description=\"\u4e13\u95e8\u4e3a\u7ed9\u5b9a\u57ce\u5e02\u83b7\u53d6\u5929\u6c14\u4fe1\u606f\u3002\",\n    input_parameters=[{\"name\": \"city\"}],\n    tools=[weather_tool],\n    endpoint=openai_endpoint,\n    model_id='\u4f60\u7684\u6a21\u578bID',\n    target_lang='Simplified Chinese' # \u6307\u5b9a\u8f93\u51fa\u8bed\u8a00\n)\n\n# \u8fd0\u884c\u667a\u80fd\u4f53\u5e76\u6d41\u5f0f\u4f20\u8f93\u4e8b\u4ef6\nevent_stream = weather_agent.run(stream=True, city=\"\u5317\u4eac\")\nfor event in event_stream:\n    print(event)\n</code></pre>"},{"location":"zh/#2-group","title":"2. \u6784\u5efa\u591a\u667a\u80fd\u4f53\u56e2\u961f (Group)","text":"<p>Agenticle \u7684\u771f\u6b63\u5a01\u529b\u5728\u4e8e\u8ba9\u667a\u80fd\u4f53\u534f\u4f5c\u3002\u4ee5\u4e0b\u662f\u5982\u4f55\u6784\u5efa\u4e00\u4e2a\u201c\u65c5\u884c\u793e\u201d\u56e2\u961f\uff0c\u5176\u4e2d\u7ba1\u7406\u8005\u5c06\u4efb\u52a1\u59d4\u6d3e\u7ed9\u4e13\u5458\u3002</p> <pre><code>from agenticle import Agent, Group, Tool, Endpoint\n\n# (\u5b9a\u4e49 get_current_weather, find_tourist_attractions \u7b49\u51fd\u6570)\n# (\u521b\u5efa weather_agent, search_agent \u7b49\u667a\u80fd\u4f53)\n\n# \u521b\u5efa\u4e00\u4e2a\u672c\u8eab\u6ca1\u6709\u5de5\u5177\u7684\u7ba1\u7406\u8005\u667a\u80fd\u4f53\nplanner_agent = Agent(\n    name=\"\u89c4\u5212\u7ecf\u7406\",\n    description=\"\u4e00\u4e2a\u806a\u660e\u7684\u89c4\u5212\u8005\uff0c\u80fd\u591f\u5206\u89e3\u590d\u6742\u7684\u65c5\u884c\u8bf7\u6c42\u5e76\u5c06\u4efb\u52a1\u59d4\u6d3e\u7ed9\u5408\u9002\u7684\u4e13\u5458\u3002\",\n    input_parameters=[{\"name\": \"user_request\"}],\n    tools=[], # \u7ba1\u7406\u8005\u53ea\u59d4\u6d3e\u4efb\u52a1\uff0c\u81ea\u5df1\u4e0d\u5de5\u4f5c\n    endpoint=openai_endpoint,\n    model_id='\u4f60\u7684\u6a21\u578bID'\n)\n\n# \u4e00\u4e2a\u7fa4\u7ec4\u4e2d\u6240\u6709\u667a\u80fd\u4f53\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u5171\u4eab\u5de5\u5177\nshared_flight_tool = Tool(get_flight_info)\n\n# \u4ee5 \"manager_delegation\" \u6a21\u5f0f\u7ec4\u5efa\u56e2\u961f\ntravel_agency = Group(\n    name=\"\u65c5\u884c\u793e\",\n    agents=[planner_agent, weather_agent, search_agent],\n    manager_agent_name=\"\u89c4\u5212\u7ecf\u7406\",\n    shared_tools=[shared_flight_tool],\n    mode='manager_delegation' # \u53ea\u6709\u7ba1\u7406\u8005\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u667a\u80fd\u4f53\n)\n\n# \u5bf9\u4e00\u4e2a\u590d\u6742\u67e5\u8be2\u8fd0\u884c\u6574\u4e2a\u7fa4\u7ec4\nuser_query = \"\u6211\u60f3\u53bb\u5317\u4eac\u65c5\u884c\u3002\u5929\u6c14\u600e\u4e48\u6837\uff0c\u6709\u54ea\u4e9b\u8457\u540d\u666f\u70b9\uff0c\u80fd\u5e2e\u6211\u67e5\u4e00\u4e0b\u822a\u73ed\u4fe1\u606f\u5417\uff1f\"\nevent_stream = travel_agency.run(stream=True, user_request=user_query)\n\nfor event in event_stream:\n    print(event)\n</code></pre>"},{"location":"zh/#mcp","title":"\u901a\u8fc7 MCP \u4e0e\u5916\u90e8\u5de5\u5177\u96c6\u6210","text":"<p>Agenticle \u652f\u6301 \u6a21\u578b\u4e0a\u4e0b\u6587\u534f\u8bae (Model Context Protocol, MCP)\uff0c\u4f7f\u667a\u80fd\u4f53\u80fd\u591f\u8fde\u63a5\u5e76\u4f7f\u7528\u6765\u81ea\u5916\u90e8\u3001\u8bed\u8a00\u65e0\u5173\u7684\u670d\u52a1\u5668\u7684\u5de5\u5177\u3002\u8fd9\u4f7f\u60a8\u80fd\u591f\u5c06\u667a\u80fd\u4f53\u7684\u80fd\u529b\u6269\u5c55\u5230\u7b80\u5355\u7684 Python \u51fd\u6570\u4e4b\u5916\uff0c\u4e0e\u5fae\u670d\u52a1\u3001\u5916\u90e8 API \u6216\u7528\u5176\u4ed6\u8bed\u8a00\u7f16\u5199\u7684\u5de5\u5177\u96c6\u6210\u3002</p> <pre><code>from agenticle import MCP\n\n# \u8fde\u63a5\u5230\u4e00\u4e2a MCP \u670d\u52a1\u5668 (\u53ef\u4ee5\u662f\u4e00\u4e2a\u672c\u5730\u811a\u672c\u6216\u4e00\u4e2a\u8fdc\u7a0b URL)\n# \u4f7f\u7528\u672c\u5730 Python \u811a\u672c\u7684\u793a\u4f8b:\n# mcp_server_endpoint = \"python -m your_mcp_server_module\"\n# \u4f7f\u7528\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u793a\u4f8b:\n# mcp_server_endpoint = \"http://localhost:8000/mcp\"\n\nmcp_client = MCP(mcp_server_endpoint)\n\n# MCP \u5ba2\u6237\u7aef\u4f1a\u81ea\u52a8\u4ece\u670d\u52a1\u5668\u5217\u51fa\u5de5\u5177\n# \u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a Agenticle \u7684 Tool \u5bf9\u8c61\u3002\nmcp_tools = mcp_client.list_tools()\n\n# \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u5de5\u5177\u6dfb\u52a0\u7ed9\u4efb\u4f55\u667a\u80fd\u4f53\nremote_tool_agent = Agent(\n    name=\"\u8fdc\u7a0b\u5de5\u5177\u4f7f\u7528\u8005\",\n    description=\"\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528\u6765\u81ea\u5916\u90e8\u670d\u52a1\u5668\u5de5\u5177\u7684\u667a\u80fd\u4f53\u3002\",\n    tools=mcp_tools,\n    # ... \u5176\u4ed6\u667a\u80fd\u4f53\u914d\u7f6e\n)\n\n# \u8be5\u667a\u80fd\u4f53\u73b0\u5728\u53ef\u4ee5\u50cf\u8c03\u7528\u672c\u5730 Python \u51fd\u6570\u4e00\u6837\n# \u8c03\u7528 'get_database_records' \u6216 'process_image' \u7b49\u5de5\u5177\u3002\nremote_tool_agent.run(\"\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6700\u8fd1 5 \u6761\u7528\u6237\u8bb0\u5f55\u3002\")\n</code></pre> <p>\u8fd9\u4e2a\u5f3a\u5927\u7684\u7279\u6027\u4f7f\u5f97 Agenticle \u751f\u6001\u7cfb\u7edf\u5177\u6709\u9ad8\u5ea6\u7684\u53ef\u6269\u5c55\u6027\u548c\u4e92\u64cd\u4f5c\u6027\u3002</p>"},{"location":"zh/#_4","title":"\u5173\u952e\u6982\u5ff5","text":""},{"location":"zh/#agent","title":"Agent","text":"<p><code>Agent</code> \u662f\u7cfb\u7edf\u4e2d\u7684\u57fa\u672c\u884c\u52a8\u8005\u3002\u5b83\u901a\u8fc7\u4ee5\u4e0b\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff1a - <code>name</code>: \u552f\u4e00\u7684\u6807\u8bc6\u7b26\u3002 - <code>description</code>: \u9ad8\u5c42\u6b21\u7684\u4efb\u52a1\u76ee\u6807\u3002 - <code>input_parameters</code>: \u5176\u4e3b\u8981\u4efb\u52a1\u8f93\u5165\u7684\u6a21\u5f0f\uff08schema\uff09\u3002 - <code>tools</code>: \u5b83\u53ef\u4ee5\u4f7f\u7528\u7684 <code>Tool</code> \u5bf9\u8c61\u5217\u8868\u3002 - <code>endpoint</code> &amp; <code>model_id</code>: \u5b83\u5e94\u4f7f\u7528\u7684\u5927\u8bed\u8a00\u6a21\u578b\u7684\u914d\u7f6e\u3002 - <code>optimize_tool_call</code>: \u4e00\u4e2a\u53ef\u9009\u7684\u5e03\u5c14\u503c\u53c2\u6570\uff0c\u5f53\u8bbe\u7f6e\u4e3a <code>True</code> \u65f6\uff0c\u4f1a\u4f7f\u7528\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u3001\u57fa\u4e8e XML \u7684\u63d0\u793a\u8bcd\u673a\u5236\u6765\u8fdb\u884c\u5de5\u5177\u8c03\u7528\u3002\u8fd9\u5bf9\u4e8e\u539f\u751f\u5de5\u5177\u8c03\u7528\u80fd\u529b\u8f83\u5f31\u7684\u6a21\u578b\u53ef\u4ee5\u63d0\u5347\u5176\u53ef\u9760\u6027\u3002</p> <p>\u5982\u679c\u5927\u8bed\u8a00\u6a21\u578b\u8ba4\u4e3a\u5728\u5355\u6b65\u4e2d\u6267\u884c\u591a\u4e2a\u5de5\u5177\u662f\u5408\u4e4e\u903b\u8f91\u7684\uff0c<code>Agent</code> \u4e5f\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u5b83\u4eec\u3002</p>"},{"location":"zh/#group","title":"Group","text":"<p><code>Group</code> \u534f\u8c03\u4e00\u4e2a <code>Agent</code> \u5b9e\u4f8b\u5217\u8868\u3002\u5173\u952e\u53c2\u6570\uff1a - <code>agents</code>: \u7fa4\u7ec4\u4e2d\u7684\u667a\u80fd\u4f53\u5217\u8868\u3002 - <code>manager_agent_name</code>: \u4f5c\u4e3a\u4efb\u52a1\u5165\u53e3\u70b9\u7684\u667a\u80fd\u4f53\u7684\u540d\u79f0\u3002 - <code>shared_tools</code>: \u7fa4\u7ec4\u4e2d\u6240\u6709\u667a\u80fd\u4f53\u9664\u4e86\u81ea\u5df1\u7684\u5de5\u5177\u5916\uff0c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u7684 <code>Tool</code> \u5bf9\u8c61\u5217\u8868\u3002 - <code>mode</code>:     - <code>'broadcast'</code> (\u9ed8\u8ba4): \u7fa4\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u667a\u80fd\u4f53\u90fd\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u4efb\u4f55\u667a\u80fd\u4f53\u3002     - <code>'manager_delegation'</code>: \u53ea\u6709\u7ba1\u7406\u8005\u667a\u80fd\u4f53\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u667a\u80fd\u4f53\u3002\u4e13\u5458\u667a\u80fd\u4f53\u53ea\u80fd\u4f7f\u7528\u81ea\u5df1\u7684\u5de5\u5177\u548c\u5171\u4eab\u5de5\u5177\u3002     - <code>'round_robin'</code>: \u667a\u80fd\u4f53\u6309\u7167\u63d0\u4f9b\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u3002\u4e00\u4e2a\u667a\u80fd\u4f53\u7684\u8f93\u51fa\u6210\u4e3a\u4e0b\u4e00\u4e2a\u667a\u80fd\u4f53\u7684\u8f93\u5165\uff0c\u5f62\u6210\u4e00\u4e2a\u5904\u7406\u6d41\u6c34\u7ebf\u3002     - <code>'voting'</code>: \u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u667a\u80fd\u4f53\u63a5\u6536\u76f8\u540c\u7684\u8f93\u5165\u5e76\u5e76\u884c\u8fd0\u884c\u3002\u5b83\u4eec\u9700\u8981\u5bf9\u4e00\u7ec4\u7ed9\u5b9a\u7684\u9009\u9879\u8fdb\u884c\u7ed3\u6784\u5316\u6295\u7968\uff0c\u7fa4\u7ec4\u901a\u8fc7\u8ba1\u7968\u6765\u786e\u5b9a\u6700\u7ec8\u7ed3\u679c\u3002 - <code>workspace</code>: \u4e00\u4e2a\u53ef\u9009\u7684 <code>Workspace</code> \u5b9e\u4f8b\u6216\u6587\u4ef6\u8def\u5f84\uff0c\u7528\u4e8e\u4e3a\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u667a\u80fd\u4f53\u521b\u5efa\u4e00\u4e2a\u5171\u4eab\u76ee\u5f55\u3002</p>"},{"location":"zh/#_5","title":"\u5de5\u4f5c\u7a7a\u95f4\u4e0e\u72b6\u6001\u7ba1\u7406","text":"<p>Agenticle \u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u529f\u80fd\u6765\u7ba1\u7406\u72b6\u6001\u548c\u5171\u4eab\u8d44\u6e90\uff0c\u8fd9\u5bf9\u4e8e\u590d\u6742\u7684\u3001\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u4efb\u52a1\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"zh/#_6","title":"\u5171\u4eab\u5de5\u4f5c\u7a7a\u95f4","text":"<p>\u60a8\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5e26\u6709 <code>Workspace</code> \u7684 <code>Group</code>\uff0c\u8fd9\u662f\u4e00\u4e2a\u6c99\u76d2\u5316\u7684\u76ee\u5f55\uff0c\u8be5\u7fa4\u7ec4\u4e2d\u7684\u6240\u6709\u667a\u80fd\u4f53\u90fd\u53ef\u4ee5\u5728\u5176\u4e2d\u8bfb\u5199\u6587\u4ef6\u3002\u8fd9\u4f7f\u5f97\u901a\u8fc7\u5171\u4eab\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u534f\u4f5c\u6210\u4e3a\u53ef\u80fd\u3002</p> <pre><code>from agenticle import Group, Workspace\n\n# \u5728\u7279\u5b9a\u76ee\u5f55\u4e2d\u521b\u5efa\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4\uff0c\u6216\u7559\u7a7a\u4ee5\u4f7f\u7528\u4e34\u65f6\u76ee\u5f55\nmy_workspace = Workspace(path=\"./my_shared_work_dir\")\n\n# \u5c06\u5de5\u4f5c\u7a7a\u95f4\u63d0\u4f9b\u7ed9\u7fa4\u7ec4\nmy_group = Group(\n    name=\"\u6587\u4ef6\u5de5\u4f5c\u7ec4\",\n    agents=[reader_agent, writer_agent],\n    workspace=my_workspace\n)\n# \u73b0\u5728\uff0creader_agent \u548c writer_agent \u90fd\u53ef\u4ee5\u4f7f\u7528\u50cf\n# read_file('data.txt') \u548c write_file('result.txt') \u8fd9\u6837\u7684\u5de5\u5177\u5728\u5de5\u4f5c\u7a7a\u95f4\u5185\u64cd\u4f5c\u3002\n</code></pre>"},{"location":"zh/#_7","title":"\u4fdd\u5b58\u4e0e\u52a0\u8f7d\u72b6\u6001","text":"<p>\u5bf9\u4e8e\u53ef\u80fd\u88ab\u4e2d\u65ad\u6216\u9700\u8981\u7a0d\u540e\u6062\u590d\u7684\u4efb\u52a1\uff0c\u60a8\u53ef\u4ee5\u5c06 <code>Group</code> \u7684\u6574\u4e2a\u72b6\u6001\uff08\u5305\u62ec\u6bcf\u4e2a\u667a\u80fd\u4f53\u7684\u5bf9\u8bdd\u5386\u53f2\uff09\u4fdd\u5b58\u5230\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u5728\u4e4b\u540e\u52a0\u8f7d\u56de\u6765\u3002</p> <pre><code># \u5047\u8bbe 'travel_agency' \u662f\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Group\n# ... \u53d1\u751f\u4e86\u4e00\u4e9b\u4ea4\u4e92 ...\n\n# \u4fdd\u5b58\u5f53\u524d\u72b6\u6001\ntravel_agency.save_state(\"travel_agency_session.json\")\n\n# \u7a0d\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u7fa4\u7ec4\u6062\u590d\u5230\u4e4b\u524d\u7684\u72b6\u6001\n# \u9996\u5148\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u914d\u7f6e\u521b\u5efa\u7fa4\u7ec4\nrestored_agency = Group(...) \n# \u7136\u540e\uff0c\u52a0\u8f7d\u72b6\u6001\nrestored_agency.load_state(\"travel_agency_session.json\")\n\n# \u7fa4\u7ec4\u73b0\u5728\u53ef\u4ee5\u4ece\u5b83\u79bb\u5f00\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\u4efb\u52a1\u3002\n</code></pre>"},{"location":"zh/#_8","title":"\u7406\u89e3\u4e8b\u4ef6\u6d41","text":"<p>\u5f53\u60a8\u4f7f\u7528 <code>stream=True</code> \u8fd0\u884c\u667a\u80fd\u4f53\u6216\u7fa4\u7ec4\u65f6\uff0c\u6846\u67b6\u4f1a\u8fd4\u56de\u4e00\u4e2a <code>Event</code> \u5bf9\u8c61\u7684\u8fed\u4ee3\u5668\u3002\u6bcf\u4e2a\u4e8b\u4ef6\u90fd\u5b9e\u65f6\u5730\u5c55\u793a\u4e86\u667a\u80fd\u4f53\u6267\u884c\u5468\u671f\u7684\u5185\u90e8\u60c5\u51b5\u3002\u8fd9\u5bf9\u4e8e\u6784\u5efa\u7528\u6237\u754c\u9762\u3001\u8bb0\u5f55\u65e5\u5fd7\u6216\u8c03\u8bd5\u975e\u5e38\u6709\u7528\u3002</p> <p>\u6bcf\u4e2a <code>Event</code> \u90fd\u6709\u4e00\u4e2a <code>source</code> (\u6765\u6e90\uff0c\u4f8b\u5982 <code>Agent:Weather_Specialist</code>)\u3001\u4e00\u4e2a <code>type</code> (\u7c7b\u578b) \u548c\u4e00\u4e2a <code>payload</code> (\u6570\u636e\u8d1f\u8f7d)\u3002\u4ee5\u4e0b\u662f\u60a8\u4f1a\u9047\u5230\u7684\u5173\u952e\u4e8b\u4ef6\u7c7b\u578b\uff1a</p> <ul> <li><code>start</code>: \u5f53\u667a\u80fd\u4f53\u4efb\u52a1\u5f00\u59cb\u65f6\u89e6\u53d1\u4e00\u6b21\u3002<ul> <li>Payload: \u4f20\u9012\u7ed9\u667a\u80fd\u4f53\u7684\u521d\u59cb\u8f93\u5165\u53c2\u6570\u3002</li> </ul> </li> <li><code>resume</code>: \u5f53 <code>Group</code> \u6216 <code>Agent</code> \u4ece\u52a0\u8f7d\u7684\u72b6\u6001\u7ee7\u7eed\u6267\u884c\u65f6\uff0c\u4f1a\u89e6\u53d1\u6b64\u4e8b\u4ef6\u4ee5\u4ee3\u66ff <code>start</code>\u3002<ul> <li>Payload: \u5173\u4e8e\u6062\u590d\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f\uff0c\u4f8b\u5982 <code>history_length</code>\u3002</li> </ul> </li> <li><code>step</code>: \u6807\u5fd7\u7740\u4e00\u4e2a\u65b0\u7684\u201c\u601d\u8003-\u884c\u52a8\u201d\u5faa\u73af\u7684\u5f00\u59cb\u3002<ul> <li>Payload: \u5305\u542b\u5f53\u524d\u6b65\u9aa4\u7f16\u53f7 <code>current_step</code>\u3002</li> </ul> </li> <li><code>reasoning_stream</code>: \u667a\u80fd\u4f53\u5728\u51b3\u5b9a\u4e0b\u4e00\u6b65\u505a\u4ec0\u4e48\u65f6\u7684\u601d\u8003\u8fc7\u7a0b\u7684\u8fde\u7eed\u6d41\u3002<ul> <li>Payload: \u6765\u81ea\u5927\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u8fc7\u7a0b\u7684\u4e00\u4e2a <code>content</code> (\u5185\u5bb9) \u7247\u6bb5\u3002</li> </ul> </li> <li><code>content_stream</code>: \u5982\u679c\u5927\u8bed\u8a00\u6a21\u578b\u51b3\u5b9a\u4e0d\u8c03\u7528\u5de5\u5177\u800c\u662f\u76f4\u63a5\u56de\u7b54\uff0c\u5219\u6b64\u4e3a\u6700\u7ec8\u7b54\u6848\u5185\u5bb9\u7684\u6d41\u3002<ul> <li>Payload: \u6700\u7ec8\u7b54\u6848\u7684\u4e00\u4e2a <code>content</code> (\u5185\u5bb9) \u7247\u6bb5\u3002</li> </ul> </li> <li><code>decision</code>: \u5f53\u667a\u80fd\u4f53\u505a\u51fa\u8c03\u7528\u5de5\u5177\u6216\u53e6\u4e00\u4e2a\u667a\u80fd\u4f53\u7684\u660e\u786e\u51b3\u5b9a\u65f6\u89e6\u53d1\u3002<ul> <li>Payload: \u5305\u542b\u8c03\u7528\u7684 <code>tool_name</code> (\u5de5\u5177\u540d\u79f0) \u548c <code>tool_args</code> (\u5de5\u5177\u53c2\u6570)\u3002</li> </ul> </li> <li><code>tool_result</code>: \u5728\u5de5\u5177\u6267\u884c\u5b8c\u6bd5\u540e\u89e6\u53d1\u3002<ul> <li>Payload: \u5305\u542b <code>tool_name</code> (\u5de5\u5177\u540d\u79f0) \u548c\u5de5\u5177\u8fd4\u56de\u7684 <code>output</code> (\u8f93\u51fa)\u3002</li> </ul> </li> <li><code>tool_completed</code>: \u5f53\u4e00\u4e2a\u5de5\u5177\u5728\u5e76\u884c\u6a21\u5f0f\u4e0b\u5b8c\u6210\u6267\u884c\u65f6\u89e6\u53d1\u7684\u5185\u90e8\u4e8b\u4ef6\u3002\u5b83\u968f\u540e\u88ab\u5904\u7406\u4ee5\u751f\u6210\u4e00\u4e2a <code>tool_result</code> \u4e8b\u4ef6\u3002<ul> <li>Payload: \u5305\u542b <code>tool_call_id</code>\u3001<code>tool_name</code> \u548c\u6700\u7ec8\u7684 <code>output</code>\u3002</li> </ul> </li> <li><code>end</code>: \u6700\u540e\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8868\u793a\u4efb\u52a1\u5df2\u5b8c\u6210\u3002<ul> <li>Payload: \u5305\u542b <code>final_answer</code> (\u6700\u7ec8\u7b54\u6848)\uff0c\u5982\u679c\u4efb\u52a1\u5931\u8d25\u5219\u5305\u542b <code>error</code> (\u9519\u8bef) \u6d88\u606f\u3002</li> </ul> </li> <li><code>error</code>: \u5f53\u53d1\u751f\u5bfc\u81f4\u8fdb\u7a0b\u7ec8\u6b62\u7684\u4e25\u91cd\u9519\u8bef\u65f6\u89e6\u53d1\u3002<ul> <li>Payload: \u4e00\u6761\u9519\u8bef <code>message</code> (\u6d88\u606f)\u3002</li> </ul> </li> </ul>"},{"location":"zh/#_9","title":"\u5b9e\u65f6\u76d1\u63a7\u4eea\u8868\u677f","text":"<p>Agenticle \u5185\u7f6e\u4e86\u4e00\u4e2a\u5b9e\u65f6\u7684\u76d1\u63a7\u4eea\u8868\u677f\uff0c\u53ef\u4ee5\u5c06\u6765\u81ea <code>Agent</code> \u6216 <code>Group</code> \u7684\u4e8b\u4ef6\u6d41\u53ef\u89c6\u5316\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u3001\u89c2\u5bdf\u667a\u80fd\u4f53\u884c\u4e3a\u4ee5\u53ca\u7406\u89e3\u591a\u667a\u80fd\u4f53\u534f\u4f5c\u7684\u6d41\u7a0b\u975e\u5e38\u6709\u7528\u3002</p>"},{"location":"zh/#_10","title":"\u5982\u4f55\u4f7f\u7528","text":"<ol> <li> <p>\u5b89\u88c5\u4eea\u8868\u677f\u4f9d\u8d56:     \u9996\u5148\uff0c\u5b89\u88c5\u4eea\u8868\u677f\u6240\u9700\u7684\u989d\u5916\u4f9d\u8d56\u9879\uff1a     <code>bash     pip install \"agenticle[dashboard]\"</code></p> </li> <li> <p>\u5305\u88c5\u60a8\u7684\u667a\u80fd\u4f53/\u7fa4\u7ec4:     \u5bfc\u5165 <code>Dashboard</code> \u7c7b\uff0c\u5e76\u7528\u5b83\u5305\u88c5\u60a8\u73b0\u6709\u7684 <code>Agent</code> \u6216 <code>Group</code> \u5b9e\u4f8b\u3002\u60a8\u5e0c\u671b\u4f20\u9012\u7ed9\u667a\u80fd\u4f53 <code>.run()</code> \u65b9\u6cd5\u7684\u4efb\u4f55\u53c2\u6570\u90fd\u5e94\u4f20\u9012\u7ed9 <code>Dashboard</code> \u7684\u6784\u9020\u51fd\u6570\u3002</p> <p>```python from agenticle import Agent, Dashboard</p> </li> <li> <p>\u5728\u6d4f\u89c8\u5668\u4e2d\u67e5\u770b:     \u6253\u5f00\u60a8\u7684\u7f51\u7edc\u6d4f\u89c8\u5668\u5e76\u8bbf\u95ee <code>http://127.0.0.1:8000</code>\u3002\u60a8\u5c06\u770b\u5230\u5f53\u60a8\u7684\u667a\u80fd\u4f53\u6216\u7fa4\u7ec4\u6267\u884c\u4efb\u52a1\u65f6\u5b9e\u65f6\u63a8\u9001\u7684\u4e8b\u4ef6\u6d41\u3002</p> </li> </ol> <p>\u4e00\u4e2a\u5b8c\u6574\u3001\u53ef\u8fd0\u884c\u7684\u793a\u4f8b\u53ef\u4ee5\u5728 <code>examples/dashboard/main.py</code> \u4e2d\u627e\u5230\u3002</p>"},{"location":"zh/#my_agent-agent","title":"\u5047\u8bbe 'my_agent' \u662f\u4e00\u4e2a\u5df2\u7ecf\u914d\u7f6e\u597d\u7684 Agent \u5b9e\u4f8b","text":""},{"location":"zh/#query","title":"\u7528\u4e8e\u667a\u80fd\u4f53\u8fd0\u884c\u7684\u53c2\u6570, \u4f8b\u5982 <code>query=\"\u67d0\u4e2a\u4efb\u52a1\"</code>","text":"<p>agent_args = {\"query\": \"\u4f26\u6566\u7684\u5929\u6c14\u600e\u4e48\u6837\uff1f\"}</p>"},{"location":"zh/#dashboard","title":"\u4f7f\u7528 Dashboard \u5305\u88c5\u667a\u80fd\u4f53","text":"<p>dashboard = Dashboard(my_agent, **agent_args)</p>"},{"location":"zh/#_11","title":"\u8fd0\u884c\u4eea\u8868\u677f\u670d\u52a1\u5668","text":""},{"location":"zh/#http1270018000","title":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u542f\u52a8\u5728 http://127.0.0.1:8000","text":"<p>dashboard.run() ```</p>"},{"location":"zh/#restful-api","title":"RESTful API \u670d\u52a1\u5668","text":"<p>Agenticle \u5185\u7f6e\u4e86\u4e00\u4e2a FastAPI \u670d\u52a1\u5668\uff0c\u5b83\u66b4\u9732\u4e86\u4e00\u4e2a RESTful API \u7528\u4e8e\u4e0e\u60a8\u7684\u667a\u80fd\u4f53\u548c\u7fa4\u7ec4\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 Agenticle \u96c6\u6210\u5230\u66f4\u5927\u578b\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u6784\u5efa\u81ea\u5b9a\u4e49\u7528\u6237\u754c\u9762\uff0c\u6216\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u7ba1\u7406\u4efb\u52a1\u3002</p>"},{"location":"zh/#api","title":"API \u7279\u6027","text":"<ul> <li>\u5f02\u6b65\u4efb\u52a1\u6267\u884c: \u542f\u52a8\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u667a\u80fd\u4f53\u4efb\u52a1\uff0c\u5e76\u8f6e\u8be2\u5176\u72b6\u6001\u548c\u7ed3\u679c\u3002</li> <li>\u5b9e\u65f6\u4e8b\u4ef6\u6d41: \u4f7f\u7528 Server-Sent Events (SSE) \u4ece\u6b63\u5728\u8fd0\u884c\u7684\u667a\u80fd\u4f53\u83b7\u53d6\u5b9e\u65f6\u4e8b\u4ef6\u6d41\u3002</li> <li>\u52a8\u6001\u667a\u80fd\u4f53\u6ce8\u518c: \u6ce8\u518c\u4efb\u610f\u6570\u91cf\u7684\u9884\u914d\u7f6e\u667a\u80fd\u4f53\u6216\u7fa4\u7ec4\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u901a\u8fc7 API \u4f7f\u7528\u3002</li> </ul>"},{"location":"zh/#_12","title":"\u5982\u4f55\u4f7f\u7528","text":"<ol> <li> <p>\u5b89\u88c5 API \u4f9d\u8d56:     <code>bash     pip install \"agenticle[api]\"</code></p> </li> <li> <p>\u521b\u5efa\u670d\u52a1\u5668\u811a\u672c:     \u521b\u5efa\u4e00\u4e2a Python \u811a\u672c (\u4f8b\u5982, <code>run_api.py</code>) \u6765\u5b9a\u4e49\u3001\u6ce8\u518c\u548c\u8fd0\u884c\u60a8\u7684\u667a\u80fd\u4f53\u3002</p> <p>```python</p> </li> <li> <p>\u8fd0\u884c\u670d\u52a1\u5668:     <code>bash     python run_api.py</code></p> </li> <li> <p>\u4e0e API \u4ea4\u4e92:     \u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55 HTTP \u5ba2\u6237\u7aef\u4e0e API \u8fdb\u884c\u4ea4\u4e92\u3002</p> <ul> <li>\u6d41\u5f0f\u4f20\u8f93\u4efb\u52a1:     <code>bash     curl -X POST http://127.0.0.1:8000/v1/tasks/stream -H \"Content-Type: application/json\" -d '{\"agent_or_group_name\": \"my_agent_api_name\", \"input_data\": {\"param\": \"value\"}}'</code></li> <li>\u5f02\u6b65\u8fd0\u884c\u4efb\u52a1:     <code>bash     curl -X POST http://127.0.0.1:8000/v1/tasks -H \"Content-Type: application/json\" -d '{\"agent_or_group_name\": \"my_agent_api_name\", \"input_data\": {\"param\": \"value\"}}'</code></li> <li>\u68c0\u67e5\u4efb\u52a1\u72b6\u6001:     <code>bash     curl http://127.0.0.1:8000/v1/tasks/{task_id}</code></li> </ul> </li> </ol> <p>\u4e00\u4e2a\u5b8c\u6574\u3001\u53ef\u8fd0\u884c\u7684\u793a\u4f8b\u53ef\u4ee5\u5728 <code>examples/api/main.py</code> \u4e2d\u627e\u5230\u3002</p>"},{"location":"zh/#in-run_apipy","title":"in run_api.py","text":"<p>from agenticle.agent import Agent import agenticle.server as server</p>"},{"location":"zh/#1_1","title":"1. \u50cf\u5f80\u5e38\u4e00\u6837\u5b9a\u4e49\u60a8\u7684\u667a\u80fd\u4f53\u548c\u7fa4\u7ec4","text":"<p>my_agent = Agent(...)</p>"},{"location":"zh/#2","title":"2. \u5c06\u5b83\u4eec\u6ce8\u518c\u5230\u670d\u52a1\u5668","text":"<p>server.register(\"my_agent_api_name\", my_agent)</p>"},{"location":"zh/#3","title":"3. \u542f\u52a8\u670d\u52a1\u5668","text":"<p>if name == \"main\":     server.start_server() ```</p>"},{"location":"zh/#_13","title":"\u9ad8\u7ea7\u7528\u6cd5: \u4f7f\u7528\u63d0\u793a\u8bcd\u5b9a\u5236\u667a\u80fd\u4f53\u884c\u4e3a","text":"<p>Agenticle \u4f7f\u7528\u57fa\u4e8e Jinja2 \u7684\u5f3a\u5927\u63d0\u793a\u8bcd\u6a21\u677f\u7cfb\u7edf\u6765\u5b9a\u4e49\u667a\u80fd\u4f53\u7684\u6838\u5fc3\u884c\u4e3a\u548c\u63a8\u7406\u8fc7\u7a0b\u3002\u9ed8\u8ba4\u7684\u63d0\u793a\u8bcd\u4f4d\u4e8e <code>agenticle/prompts/default_agent_prompt.md</code>\uff0c\u5b83\u6307\u793a\u667a\u80fd\u4f53\u9075\u5faa\u4e00\u4e2a\u201c\u601d\u8003-\u884c\u52a8\u201d\u5faa\u73af\u3002</p> <p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u81ea\u5df1\u7684\u63d0\u793a\u8bcd\u6a21\u677f\u5e76\u5c06\u5176\u6587\u4ef6\u8def\u5f84\u4f20\u9012\u7ed9 <code>Agent</code> \u7684\u6784\u9020\u51fd\u6570\u6765\u5b9a\u5236\u6b64\u884c\u4e3a\u3002</p>"},{"location":"zh/#default_agent_promptmd","title":"\u9ed8\u8ba4\u63d0\u793a\u8bcd (<code>default_agent_prompt.md</code>)","text":"<p>\u9ed8\u8ba4\u6a21\u677f\u4e3a\u667a\u80fd\u4f53\u5efa\u7acb\u4e86\u4e00\u4e2a\u201c\u8ba4\u77e5\u6846\u67b6\u201d\uff0c\u5f15\u5bfc\u5b83\uff1a 1.  \u89c2\u5bdf (OBSERVE): \u56de\u987e\u76ee\u6807\u548c\u5f53\u524d\u72b6\u6001\u3002 2.  \u601d\u8003 (THINK): \u8bc4\u4f30\u4fe1\u606f\uff0c\u89c4\u5212\u4e0b\u4e00\u6b65\uff0c\u5e76\u9009\u62e9\u4e00\u4e2a\u5de5\u5177\u6216\u4e13\u5bb6\u667a\u80fd\u4f53\u3002 3.  \u884c\u52a8 (ACT): \u5c06\u5176\u601d\u8003\u8fc7\u7a0b\u5916\u5316\u5e76\u6267\u884c\u6240\u9009\u7684\u884c\u52a8\u3002</p> <p>\u8fd9\u79cd\u7ed3\u6784\u5316\u7684\u65b9\u6cd5\u786e\u4fdd\u4e86\u900f\u660e\u548c\u5408\u4e4e\u903b\u8f91\u7684\u51b3\u7b56\u8fc7\u7a0b\u3002</p>"},{"location":"zh/#_14","title":"\u4f7f\u7528\u81ea\u5b9a\u4e49\u63d0\u793a\u8bcd\u6a21\u677f","text":"<p>\u8981\u8986\u76d6\u9ed8\u8ba4\u884c\u4e3a\uff0c\u53ea\u9700\u5728\u521b\u5efa\u667a\u80fd\u4f53\u65f6\u63d0\u4f9b\u60a8\u7684\u81ea\u5b9a\u4e49 <code>.md</code> \u6a21\u677f\u6587\u4ef6\u7684\u8def\u5f84\uff1a</p> <pre><code>my_custom_prompt_path = \"path/to/your/custom_prompt.md\"\n\ncustom_agent = Agent(\n    name=\"\u81ea\u5b9a\u4e49\u667a\u80fd\u4f53\",\n    # ... \u5176\u4ed6\u53c2\u6570\n    prompt_template_path=my_custom_prompt_path\n)\n</code></pre> <p>\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u5b8c\u5168\u91cd\u65b0\u5b9a\u4e49\u667a\u80fd\u4f53\u7684\u64cd\u4f5c\u6307\u5357\u3001\u4e2a\u6027\uff0c\u751a\u81f3\u662f\u5176\u63a8\u7406\u7ed3\u6784\u3002</p>"},{"location":"zh/#_15","title":"\u6a21\u677f\u53d8\u91cf","text":"<p>\u5728\u521b\u5efa\u81ea\u5b9a\u4e49\u63d0\u793a\u8bcd\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b Jinja2 \u53d8\u91cf\uff0c\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u81ea\u52a8\u4f20\u9012\u7ed9\u6a21\u677f\uff1a</p> <ul> <li><code>{{ agent_name }}</code>: \u667a\u80fd\u4f53\u7684\u540d\u79f0\u3002</li> <li><code>{{ agent_description }}</code>: \u667a\u80fd\u4f53\u7684\u9ad8\u5c42\u4efb\u52a1\u63cf\u8ff0\u3002</li> <li><code>{{ target_language }}</code>: \u667a\u80fd\u4f53\u54cd\u5e94\u6240\u9700\u7684\u76ee\u6807\u8f93\u51fa\u8bed\u8a00\uff08\u4f8b\u5982 'English', 'Simplified Chinese'\uff09\u3002</li> <li><code>{{ plain_tools }}</code>: \u5bf9\u667a\u80fd\u4f53\u53ef\u7528\u7684\u6807\u51c6 <code>Tool</code> \u5bf9\u8c61\u5217\u8868\u3002\u8fd9\u4e9b\u662f\u5e38\u89c4\u7684 Python \u51fd\u6570\u3002</li> <li><code>{{ agent_tools }}</code>: \u5b9e\u9645\u4e0a\u662f\u5176\u4ed6\u667a\u80fd\u4f53\u7684\u5de5\u5177\u5217\u8868\u3002\u8fd9\u5141\u8bb8\u60a8\u5728\u63d0\u793a\u8bcd\u4e2d\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u663e\u793a\u5b83\u4eec\uff0c\u4f8b\u5982\u4f5c\u4e3a\u201c\u4e13\u5bb6\u667a\u80fd\u4f53\u201d\u3002</li> <li><code>{{ tools }}</code>: \u6240\u6709\u5de5\u5177\u7684\u5b8c\u6574\u5217\u8868\uff08\u5305\u62ec <code>plain_tools</code> \u548c <code>agent_tools</code>\uff09\u3002</li> <li>\u81ea\u5b9a\u4e49\u4e0a\u4e0b\u6587\u53d8\u91cf: \u4ece <code>Group</code> \u4f20\u9012\u7684\u4efb\u4f55\u989d\u5916\u4e0a\u4e0b\u6587\uff08\u4f8b\u5982 <code>collaboration_mode</code>, <code>mode_description</code>\uff09\u90fd\u53ef\u4ee5\u5728\u6a21\u677f\u4e2d\u8bbf\u95ee\u3002\u8fd9\u5141\u8bb8\u57fa\u4e8e\u534f\u4f5c\u7b56\u7565\u5b9e\u73b0\u9ad8\u5ea6\u81ea\u9002\u5e94\u7684\u667a\u80fd\u4f53\u884c\u4e3a\u3002</li> </ul> <p>\u60a8\u53ef\u4ee5\u5728\u6a21\u677f\u4e2d\u904d\u5386\u8fd9\u4e9b\u5de5\u5177\u5217\u8868\uff0c\u4ee5\u52a8\u6001\u663e\u793a\u667a\u80fd\u4f53\u7684\u80fd\u529b\uff0c\u5982\u4e0b\u6240\u793a\uff1a</p> <p>```jinja --- \u57fa\u7840\u5de5\u5177 --- {% for tool in plain_tools %} - {{ tool.name }}({% for p in tool.parameters %}{{ p.name }}: {{ p.get('annotation', 'any')}}{% if not loop.last %}, {% endif %}{% endfor %}) \u529f\u80fd: {{ tool.description | indent(4) }} {% endfor %}</p>"}]}